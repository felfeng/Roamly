// import pkg from "pg";
// import OpenAI from "openai";
// import dotenv from "dotenv";
// import express from "express";
// import cors from "cors";

// dotenv.config();

// const { Client } = pkg;
// const app = express();
// const PORT = process.env.PORT || 3000;

// app.use(cors());
// app.use(express.json());

// // Database client setup
// const client = new Client({
//   user: process.env.DB_USER,
//   password: process.env.DB_PASSWORD,
//   host: process.env.DB_HOST,
//   port: process.env.DB_PORT,
//   database: process.env.DB_NAME,
// });

// await client
//   .connect()
//   .then(() => console.log("Database connected successfully"))
//   .catch((err) => {
//     console.error("Database connection error:", err);
//     process.exit(1); // Exit process if database connection fails
//   });

// // OpenAI client setup
// const openai = new OpenAI({
//   apiKey: process.env.OPENAI_API_KEY,
// });

// // Endpoint for generating itineraries
// app.post("/api/itinerary", async (req, res) => {
//   const { location, preference } = req.body;

//   if (!location || preference === undefined) {
//     return res.status(400).json({
//       error: "Invalid request. Please provide 'location' and 'preference'.",
//     });
//   }

//   try {
//     console.log("Querying database for location:", location);

//     // Fetch places from database
//     const dbRes = await client.query(
//       `SELECT * FROM locations WHERE name ILIKE $1 ORDER BY RANDOM() LIMIT 10`,
//       [`%${location}%`]
//     );
//     const places = dbRes.rows;

//     let result = places;

//     // If no places are found, call OpenAI API for mock data
//     // if (places.length === 0) {
//     //   console.log("No places found in database. Calling OpenAI...");

//     //   const response = await openai.chat.completions.create({
//     //     model: "gpt-4o-mini",
//     //     messages: [
//     //       {
//     //         role: "system",
//     //         content:
//     //           "You are a helpful assistant generating travel itineraries.",
//     //       },
//     //       {
//     //         role: "user",
//     //         content: `Generate 10 mock places for a day trip in ${location}. Include a mix of sightseeing and restaurants. Format as a JSON array with 'name', 'type' (sightseeing or food), 'rating', 'lat', and 'lon'.`,
//     //       },
//     //     ],
//     //   });

//     //   const mockPlaces = JSON.parse(response.choices[0].message.content);
//     //   console.log("Mock data generated by OpenAI:", mockPlaces);

//     //   // Insert mock places into the database
//     //   for (const place of mockPlaces) {
//     //     await client.query(
//     //       `INSERT INTO locations (name, type, rating, lat, lon) VALUES ($1, $2, $3, $4, $5)`,
//     //       [place.name, place.type, place.rating, place.lat, place.lon]
//     //     );
//     //   }

//     //   result = mockPlaces;
//     // }
//     if (places.length === 0) {
//       console.log("No places found. Using static mock data...");
//       const mockPlaces = [
//         {
//           name: "Space Needle",
//           type: "sightseeing",
//           rating: 4.8,
//           lat: 47.6205,
//           lon: -122.3493,
//         },
//         {
//           name: "Pike Place Market",
//           type: "sightseeing",
//           rating: 4.7,
//           lat: 47.6097,
//           lon: -122.3426,
//         },
//         {
//           name: "The Pink Door",
//           type: "food",
//           rating: 4.6,
//           lat: 47.6099,
//           lon: -122.3423,
//         },
//         {
//           name: "Canlis",
//           type: "food",
//           rating: 4.8,
//           lat: 47.6478,
//           lon: -122.3432,
//         },
//       ];

//       result = mockPlaces;

//       for (const place of mockPlaces) {
//         await client.query(
//           `INSERT INTO locations (name, type, rating, lat, lon) VALUES ($1, $2, $3, $4, $5)`,
//           [place.name, place.type, place.rating, place.lat, place.lon]
//         );
//       }
//     }

//     // Create and return the itinerary
//     const itinerary = createItinerary(result, preference);
//     console.log("Generated itinerary:", itinerary);
//     res.json(itinerary);
//   } catch (error) {
//     console.error("Error processing request:", error);
//     res.status(500).json({
//       error: "Internal Server Error",
//       details: error.message,
//     });
//   }
// });

// // Helper function to create an itinerary
// function createItinerary(places, preference) {
//   const sightseeingPlaces = places
//     .filter((place) => place.type === "sightseeing")
//     .sort((a, b) => b.rating - a.rating);
//   const foodPlaces = places
//     .filter((place) => place.type === "food")
//     .sort((a, b) => b.rating - a.rating);

//   const totalPlaces = Math.min(6, places.length);
//   const foodCount = Math.round((preference / 100) * totalPlaces);
//   const sightseeingCount = totalPlaces - foodCount;

//   return [
//     ...sightseeingPlaces.slice(0, sightseeingCount),
//     ...foodPlaces.slice(0, foodCount),
//   ].map((place, index) => ({
//     time: `${9 + index * 2}:00`,
//     name: place.name,
//     type: place.type,
//     lat: place.lat,
//     lon: place.lon,
//   }));
// }

// app.listen(PORT, () => {
//   console.log(`Server running on http://localhost:${PORT}`);
// });

import pkg from "pg"; // PostgreSQL client
import dotenv from "dotenv"; // For environment variables
import express from "express"; // For API
import cors from "cors"; // For handling cross-origin requests

dotenv.config(); // Load environment variables

const { Client } = pkg;
const app = express();
const PORT = process.env.PORT || 3000;

// Middleware setup
app.use(cors());
app.use(express.json());

// Database client setup
const client = new Client({
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  host: process.env.DB_HOST,
  port: process.env.DB_PORT,
  database: process.env.DB_NAME,
});

await client
  .connect()
  .then(() => console.log("Database connected successfully"))
  .catch((err) => {
    console.error("Database connection error:", err);
    process.exit(1); // Exit the process if the database connection fails
  });

// Endpoint for generating itineraries
app.post("/api/itinerary", async (req, res) => {
  const { location, preference } = req.body;

  // Validate the request body
  if (!location || preference === undefined) {
    return res.status(400).json({
      error: "Invalid request. Please provide 'location' and 'preference'.",
    });
  }

  try {
    console.log("Querying database for location:", location);

    // Query the database for places matching the location
    const dbRes = await client.query(
      `SELECT * FROM locations WHERE name ILIKE $1 ORDER BY RANDOM() LIMIT 10`,
      [`%${location}%`]
    );
    const places = dbRes.rows;

    let result = places;

    // If no places found, use static mock data
    if (places.length === 0) {
      console.log("No places found. Using static mock data...");
      const mockPlaces = [
        {
          name: "Space Needle",
          type: "sightseeing",
          rating: 4.8,
          lat: 47.6205,
          lon: -122.3493,
        },
        {
          name: "Pike Place Market",
          type: "sightseeing",
          rating: 4.7,
          lat: 47.6097,
          lon: -122.3426,
        },
        {
          name: "The Pink Door",
          type: "food",
          rating: 4.6,
          lat: 47.6099,
          lon: -122.3423,
        },
        {
          name: "Canlis",
          type: "food",
          rating: 4.8,
          lat: 47.6478,
          lon: -122.3432,
        },
      ];

      // Set the result to mock data
      result = mockPlaces;

      // Insert mock data into the database
      for (const place of mockPlaces) {
        await client.query(
          `INSERT INTO locations (name, type, rating, lat, lon) VALUES ($1, $2, $3, $4, $5)`,
          [place.name, place.type, place.rating, place.lat, place.lon]
        );
      }
    }

    // Create an itinerary and respond
    const itinerary = createItinerary(result, preference);
    console.log("Generated itinerary:", itinerary);
    res.json(itinerary);
  } catch (error) {
    console.error("Error processing request:", error);
    res.status(500).json({
      error: "Internal Server Error",
      details: error.message,
    });
  }
});

// Helper function to create an itinerary
function createItinerary(places, preference) {
  const sightseeingPlaces = places
    .filter((place) => place.type === "sightseeing")
    .sort((a, b) => b.rating - a.rating);
  const foodPlaces = places
    .filter((place) => place.type === "food")
    .sort((a, b) => b.rating - a.rating);

  const totalPlaces = Math.min(6, places.length);
  const foodCount = Math.round((preference / 100) * totalPlaces);
  const sightseeingCount = totalPlaces - foodCount;

  return [
    ...sightseeingPlaces.slice(0, sightseeingCount),
    ...foodPlaces.slice(0, foodCount),
  ].map((place, index) => ({
    time: `${9 + index * 2}:00`,
    name: place.name,
    type: place.type,
    lat: place.lat,
    lon: place.lon,
  }));
}

// Start the server
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});
